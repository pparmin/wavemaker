use wavemaker::wav::*;

type Sample = i16;
const SAMPLE_SIZE: u16 = std::mem::size_of::<Sample>() as u16;

const SAMPLE_MAX: u16 = 32767;
const DURATION: u32 = 5;
const SR: u32 = 44100;
const NCHANNELS: u16 = 1;
const NSAMPLES: u32 = NCHANNELS as u32 * DURATION * SR;

// static mut BUF: [Sample; NSAMPLES as usize] = [0; NSAMPLES as usize];

fn main() {
    let config = Config {
        sample_size: SAMPLE_SIZE,
        channels: NCHANNELS,
        sample_rate: SR,
        bits_per_sample: 8 as u16 * SAMPLE_SIZE,
        nsamples: NSAMPLES,
        duration: 5,
    };

    let wav_file = Wave::new(&config);
    // let wav: WavHeader = WavHeader::new(config); 
    

    /* TODO: Have to rewrite the file creation. File should be created in src/main.rs */ 
    wav_file.write_header("output.wav");
    
    //let mut BUF: [Sample; config.nsamples as usize] = [0; NSAMPLES as usize];

    wav_file.write_data("output.wav");

    /* future API: 
     * // new() initializes a default config 
     * let config = Wave::Config {
     *      channels: 1,
     *      sample_rate: 44100,
     *      bits_per_sample: 16
     * } 
     * // config can also be generated by passing parameters
     * let config = Wave::Config::create(SR, NCHANNELS, etc.)
     * 
     * let _wav = Wave::new(config);

    
    */ 
}
